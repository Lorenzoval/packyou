#!/usr/bin/python3

import argparse
import subprocess
import pefile

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--unpacked", help="Path of unpacked executable", required=True)
parser.add_argument("-p", "--packed", help="Path of packed (output) executable", required=False)
parser.add_argument("-cc", "--cross_compiler", help="Path of cross compiler executable", required=False)
parser.add_argument("-rc", "--resource_compiler", help="Path of resource compiler executable", required=False)
parser.add_argument("-cf", "--cflags", help="Compiler flags, separated by a comma", required=False)
parser.add_argument("-lf", "--ldflags", help="Linker flags, separated by a comma", required=False)
parser.add_argument("-o", "--obfuscate", help="Type of obfuscation", required=False)
parser.add_argument("-m", "--mode", help="Packing mode", required=False)
args = parser.parse_args()

unpacked = args.unpacked

packed = args.packed if args.packed else unpacked[0:-4] + "_packed.exe"

cc = args.cross_compiler if args.cross_compiler else "/usr/bin/i686-w64-mingw32-gcc"

rc = args.resource_compiler if args.resource_compiler else "/usr/bin/i686-w64-mingw32-windres"

cflags = ["-" + flag for flag in args.cflags.split(",")] if args.cflags else ["-Wall", "-Wextra"]

ldflags = ["-" + flag for flag in args.ldflags] if args.ldflags else []

obfuscate = args.obfuscate

mode = args.mode

objects = []

match obfuscate:
    case "zstd":
        subprocess.run(["./create_single_file_decoder.sh"], cwd="zstd/build/single_file_libs")

        with open(unpacked) as file:
            size_process = subprocess.run(["wc", "-c"], stdout=subprocess.PIPE, stdin=file, text=True)
        real_size = size_process.stdout[:-1]
        p_args = ["zstd", "-f", "-q", "-19", unpacked]
        print("\nZstd compressing...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args)
        unpacked = unpacked + ".zst"

        p_args = [cc] + [i for i in cflags] + ["-c", "-o", "zstd.o", "zstd.c"]
        print("\nCompiling zstd.c...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args, cwd="obfuscation")
        objects.append("obfuscation/zstd.o")

        cflags.extend(["-DOBFUSCATE", "-DREAL_SIZE=" + real_size])

    case _:
        pass

additional = []

match mode:
    case "si":
        # Extract information from unpacked pe
        pe = pefile.PE(args.unpacked)
        image_base = pe.OPTIONAL_HEADER.ImageBase
        image_size = pe.OPTIONAL_HEADER.SizeOfImage

        ldflags.append("-Wl,--image-base=" + hex(image_base))

        print("\nGenerating payload.c...")
        with open("self_injection/payload.c", "w") as c_file:
            with open(unpacked, "rb") as unpacked:
                c_file.write("#include \"payload.h\"\n\nunsigned char payload[] = { ")
                c_file.write("0x" + unpacked.read(1).hex())
                file_size = 1
                while True:
                    byte = unpacked.read(1).hex()
                    if not byte:
                        break
                    c_file.write(", 0x" + byte)
                    file_size += 1

                # Make sure there is enough memory for the unpacked process by filling the remaining bytes with NOP
                written_size = file_size
                while written_size < image_size:
                    c_file.write(", 0x90")
                    written_size += 1

                cflags.append("-DFILE_SIZE=" + str(file_size))
                c_file.write(" };\n")

        p_args = [cc] + ["-c", "-o", "payload.o", "payload.c"]
        print("\nCompiling payload.c...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args, cwd="self_injection")
        objects.append("self_injection/payload.o")

        p_args = [cc] + [i for i in cflags] + ["-c", "-o", "packyou_si.o", "packyou_si.c"]
        print("\nCompiling packyou_si.c...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args, cwd="self_injection")
        objects.append("self_injection/packyou_si.o")

    case _:
        p_args = [rc, "resource/packyou_res.rc", "-DUNPACKED=" + unpacked, "-O", "coff", "-o",
                  "resource/packyou_res.res"]
        print("\nCompiling packyou_res.rc...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args)

        p_args = [cc] + [i for i in cflags] + ["-c", "-o", "packyou_res.o", "packyou_res.c"]
        print("\nCompiling packyou_res.c...\n" + " ".join(arg for arg in p_args))
        subprocess.run(p_args, cwd="resource")
        objects.append("resource/packyou_res.o")

        additional.append("resource/packyou_res.res")

p_args = [cc, "-o", packed] + [i for i in objects] + [i for i in ldflags] + additional
print("\nCompiling packed executable...\n" + " ".join(arg for arg in p_args))
subprocess.run(p_args)

print("\nDone!")
